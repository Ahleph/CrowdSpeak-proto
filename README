Crowdspeak is a local-area messaging app.

Its part twitter, part reddit, and part ad-hoc communication.
Like twitter, only short text messages are allowed.
Like Reddit, messages can be up/downvoted, as well as commented on.

Initially, each message is only visible in the vicinity on the original sender's wifi signal. Each person that upvotes the message will then begin to broadcast the message on their own wifi as well, propogating the message to a larger area. The message can thus be seen in range of all upvoters as well as the original broadcaster.

Ideally, good ideas will be upvoted and spread around, while crappy messages will die from not being seen. This will allow large groups of people to communicate and come to a "concensus" in realtime.

Also, since the app uses a decentralized design, the communication should be uncensorable and able to continue even in the event of no internet connectivity.

I see applications for this app wherever there exists a group of people. Whether there's a political rally, a rock concert, or a riot, the crowd WILL be heard.

Since it appears that ad-hoc communication is near-impossible on Android, I've decided to prototype this using a more server-based approach. 

More details:
Writing custom table-based routing protocol to appropriately handle

Storing messages in SQLite Database - http://developer.android.com/guide/topics/data/data-storage.html#db

MessageListActivity.java - the main activity that shows the list of currently available messages

MessageThreadActivity.java - the activity used to show a single message thread

MessageNetworkManager.java - the service that handles wifi connections and broadcasts and receives messages
